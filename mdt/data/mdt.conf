# Specifics for the output format of optimization and sampling
# the options gzip determine if the volumes are written as .nii or as .nii.gz
output_format:
    optimization:
        gzip: True
    sampling:
        gzip: True

# The default temporary results directory for optimization and sampling. Set to !!null to disable and to use the
# per subject directory. For linux a good value can be:
#tmp_results_dir: /tmp/mdt
# where /tmp can be memory mapped.
tmp_results_dir: !!null

runtime_settings:
    # The single device index or the list with device indices to use during all GPU operations
    # For list list of possible values please view mdt_list_devices or view the list in the GUI.
    cl_device_ind: !!null

# Please see the documentation of MOT meta optimizer for more information about the options
optimization:
    general:
        # the optimizers to use. List at least one, can be more for use with extra_optim_runs > 0.
        # You can set the patience to null. Then the default patience for the optimizer is used.
        optimizers:
            -   name: 'Powell'
                patience: 2
                # check the MOT reference for additional optimizer options per optimizer.
                optimizer_options: {}

        # The additional number of iterations, with either a random perturbation or a smoothing step in between.
        extra_optim_runs: 0

    # Optimizations settings for single models. This can overwrite any value from the general optimization settings.
    # This uses regex expressions for matching the model_name. As keys for the items you can either provide
    # a string with a single regex, or you can provide a !!python/tuple [...] with multiple keys that is
    # partially matched if needed.
    #
    # Please note that if you specify an optimizer in the fit_model call these settings are overwritten.
    model_specific: {}


# Please see the documentation of MOT meta sampler for more information about the options
sampling:
    general:
        # the samplers to use. This is a list, in future use we might have the same chain system as with the
        # optimizers.
        samplers:
            -   name: 'MetropolisHastings'
                nmr_samples: 500
                burn_length: 500
                sample_intervals: 5
                proposal_update_intervals: 50

    # Sampling settings for single models. This can overwrite any value from the general sampling settings.
    # This uses regex expressions for matching the model_name.
    #
    # Please note that if you specify a sampler in the sample_model call these settings are overwritten.
    model_specific: {}


# options for estimating the noise std before model fitting and or sampling
noise_std_estimating:
    general:
        # the optimization routine will use the given estimators in the given order
        estimators:
            -   AllUnweightedVolumes
            -   TwoUnweightedVolumes
            -   AverageOfAir_ExtendedMask
            -   AverageOfAir_DilatedMask

# The strategies for processing the models
processing_strategies:
    optimization:
        general:
            name: ProtocolDependent
            options:
                steps: [[0, 0], [100, 30000], [200, 100000]]
            #name: VoxelRange
            #    options:
            #    nmr_voxels: 500

        # The processing strategies for specific models. This overrides the general processing strategy.
        # This uses regex expressions for matching the model_name. As keys for the items you can either provide
        # a string with a single regex, or you can provide a !!python/tuple [...] with multiple keys that is
        # partially matched if needed.
        #
        # Example for Noddi in a cascade:
        #
        # !!python/tuple ['^Noddi \(Cascade[|a-zA-Z0-9_]*\)$', '^Noddi']:
        #      name: VoxelRange
        #
        model_specific:
            '^S0$':
                name: AllVoxelsAtOnce

            '^\w+\-ExVivo$':
                name: VoxelRange
                options:
                    nmr_voxels: 1000000

            '^Noddi$':
                name: ProtocolDependent
                options:
                    steps: [[0, 0], [100, 150000], [200, 50000]]

            '^Charmed_r[1-2]$':
                name: ProtocolDependent
                options:
                    steps: [[0, 0], [100, 150000], [200, 10000]]

            '^Charmed$':
                name: ProtocolDependent
                options:
                    steps: [[0, 0], [100, 100000], [200, 10000]]

            '^BallStickStickStick$':
                name: ProtocolDependent
                options:
                    steps: [[0, 0], [100, 200000], [200, 30000]]

    sampling:
        general:
            name: VoxelRange
            options:
                nmr_voxels: 100000

        model_specific:
            '^S0(-T2)?$':
                name: VoxelRange
                options:
                    nmr_voxels: 1500000


logging:
    info_dict:
        version: 1
        disable_existing_loggers: False

        formatters:
            simple:
                format: "[%(asctime)s] [%(levelname)s] [%(name)s] [%(funcName)s] - %(message)s"

        handlers:
            console:
                class: mdt.log_handlers.StdOutHandler
                level: INFO
                formatter: simple

            model_output_file:
                class: mdt.log_handlers.ModelOutputLogHandler
                level: DEBUG
                formatter: simple
                encoding: utf8

            dispatch_handler:
                class: mdt.log_handlers.LogDispatchHandler
                level: INFO
                formatter: simple

        loggers:
            mot:
                level: DEBUG
                handlers: [console, model_output_file]

            mdt:
                level: DEBUG
                handlers: [console, model_output_file]

        root:
            level: INFO
            handlers: [dispatch_handler]
