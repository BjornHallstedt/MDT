optimization_settings:
    # Please see the documentation of MOT.meta_optimizer for more information about the options
    general:
        # the optimizers to use. List at least one, can be more for use with extra_optim_runs > 0.
        # You can set the patience to null. Then the default patience for the optimizer is used.
        optimizers:
            -   name: 'Powell'
                patience: 2

        # The additional number of iterations, with either a random perturbation or a smoothing step in between.
        extra_optim_runs: 0

        # If we want to use smoothing or not. This is mutually exclusive with extra_optim_runs_use_perturbation.
        # This takes precedence over using perturbations.
        extra_optim_runs_apply_smoothing: False

        # If we want to use the parameter perturbation by the model or not.
        # This is mutually exclusive with extra_optim_runs_apply_smoothing.
        extra_optim_runs_use_perturbation: True

        # The smoothing routines to use during the extra runs, size is in voxels
        smoothing_routines:
            -   name: 'MedianFilter'
                size: [1, 1, 1]

        # The load balancer to use for the computations
        load_balancer:
            name: 'PreferGPU'
            run_in_batches: True
            single_batch_length: !!float 2.0e6

        # the indices of the devices we want to use for the computations.
        # This works in combination with the load balancers.
        # For the indices please run the script mdt-list-devices.
        # An empty list indicates that we want to use all devices.
        cl_devices: []

    # Optimizations settings for single models. This can overwrite any value from general_optimization_settings.
    # This uses regex expressions for matching the model_name and the settings are accumulative and order matters.
    # Note 1) the optimization configuration hints in the cascades models takes precedence over these values.
    # Note 2) if you specify an optimizer in the fit_model function these settings are overwritten.
    # See for additional information the info at processing_strategies -> model_specific
    model_specific: []

# options for estimating the noise std before model fitting and or sampling
noise_std_estimating:
    general:
        # the optimization routine will use the given estimators in the given order
        estimators:
            -   AverageOfAirROI
            -   AverageOfUnweightedVolumes


# The strategies to for processing the models
processing_strategies:
    optimization:
        general:
            name: AllVoxelsAtOnce

        # Optimizations settings specific for models. This can overwrite any value from general_optimization_settings,
        # and uses regex expressions for matching the model by name. The settings are accumulative and order matters.
        # You can specify a model within a cascade by formatting a sort of tree structure with the cascade on top
        # and the final single model on the bottom of the tree.
        #
        # If you don't specify a cascade the model will still be matched.
        #
        # Example for Noddi in a cascade:
        #
        # - '^Noddi \(Cascade[|a-zA-Z0-9_]*\)$':
        #        - '^Noddi':
        #            name: SliceBySlice
        #
        model_specific:
            - '^Noddi':
                name: VoxelRange
                options:
                    nmr_voxels: 20000

            - '^Charmed(_[1-2]r)?':
                name: VoxelRange
                options:
                    nmr_voxels: 20000

            - '^BallStickStickStick?':
                name: ProtocolDependent
                options:
                    steps: [[0, 0], [100, 50000], [200, 30000]]

    sampling:
        general:
            name: VoxelRange
            options:
                nmr_voxels: 10000


logging:
    info_dict:
        version: 1
        disable_existing_loggers: False
        formatters:
            simple:
                format: "[%(asctime)s] [%(levelname)s] [%(name)s] [%(funcName)s] - %(message)s"

        handlers:
            console:
                class: mdt.log_handlers.StdOutHandler
                level: INFO
                formatter: simple

            model_output_file:
                class: mdt.log_handlers.ModelOutputLogHandler
                level: DEBUG
                formatter: simple
                encoding: utf8

            dispatch_handler:
                class: mdt.log_handlers.LogDispatchHandler
                level: INFO
                formatter: simple

        loggers:
            mot:
                level: DEBUG
                handlers: [console, model_output_file]

            mdt:
                level: DEBUG
                handlers: [console, model_output_file]

        root:
            level: INFO
            handlers: [dispatch_handler]
